package pumpkinbox.ui.create_user;

import com.jfoenix.controls.JFXPasswordField;
import com.jfoenix.controls.JFXTextField;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Region;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import pumpkinbox.api.CODES;
import pumpkinbox.client.Client;
import pumpkinbox.api.ResponseObject;
import pumpkinbox.dialogs.AlertDialog;
import pumpkinbox.ui.draggable.EffectUtilities;
import pumpkinbox.ui.icons.Icons;
import pumpkinbox.ui.images.Images;
import pumpkinbox.validation.Validator;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

/**
 * Controller class for signup screen.
 * @author Rami Awar
 * Created by ramiawar on 3/23/17.
 */
public class signupScreenController implements Initializable{

    private final String CRLF = "\r\n";
    private Stage stage;

    Icons icons = new Icons();


    @FXML
    Label closeIcon;
    @FXML
    HBox menuBar;
    @FXML
    Region draggableRegion;
    @FXML
    Label minimizeIcon;
    @FXML
    JFXTextField email;
    @FXML
    JFXPasswordField password;
    @FXML
    JFXTextField firstname;
    @FXML
    JFXTextField lastname;
    @FXML
    Label firstnameLabel;
    @FXML
    Label lastnameLabel;
    @FXML
    Label emailLabel;
    @FXML
    Label passwordLabel;
    @FXML
    StackPane root;
    @FXML
    ImageView pumpkinbox_logo;

    Validator firstnameValidator;
    Validator lastnameValidator;
    Validator emailValidator;
    Validator passwordValidator;


    //Receiving stage from main class to make window draggable

    /**
     * This function passes the current stage to the controller, and makes some elements draggable since the gui is transparent and undecorated.
     * @param stage Created stage from caller controller.
     */
    public void registerStage(Stage stage){

        this.stage = stage;
        EffectUtilities.makeDraggable(this.stage, this.menuBar);
        EffectUtilities.makeDraggable(this.stage, this.draggableRegion);
    }

    /**
     * This function closes the current window or stage.
     */
    void close() {
        stage.close();
    }

    /**
     * This function closes the current window or stage upon pressing a button. Assignment is in FXML.
     * @param e Event generated by FXML button press.
     */
    @FXML
    void close(ActionEvent e) {
        stage.close();
    }


    /**
     * This function does 3 main things:
     * <ul>
     *     <li>Checks whether or not the text fields have been filled, and whether the information entered is valid.(Validity is clear from Validator class)</li>
     *     <li>Sends a well-constructed string to the client thread which in turn sends it to the server. The server understands the meanings of different parts of this string.</li>
     *     <li>Waits for a response from the client thread, which sends a ResponseObject. Then upon parsing this response object decides on the action to be taken. (Could be OK, DATABASE INSERTION ERROR,ALREADY EXISTING
     *     USER) An appropriate dialog is displayed for each case.</li>
     * </ul>
     * @param event Event generated by FXML button press.
     */
    @FXML
    void signup(ActionEvent event){

        if(email.getText().isEmpty() || password.getText().isEmpty() || firstname.getText().isEmpty() || lastname.getText().isEmpty()){

            //Display ALERT: please fill all fields
            AlertDialog alert = new AlertDialog(root, "Invalid Request", "Please fill all fields before submitting", "Okay");
            alert.showDialog();
            return;
        }

        //CHECK IF ANY LABEL IS VISIBLE -> INCORRECT INFO
        if(emailLabel.isVisible() || passwordLabel.isVisible() || firstnameLabel.isVisible() || lastnameLabel.isVisible()){

            //Display alert: fill fields with valid values
            AlertDialog alert = new AlertDialog(root, "Invalid Values", "Please fill all fields with valid values", "Okay");
            alert.showDialog();
            return;
        }

        ResponseObject response = Client.sendSignupData("SIGNUP " + email.getText() + "|" + password.getText() + " " + firstname.getText() + "|" + lastname.getText());

        switch(response.getStatusCode()){
            case CODES.ALREADY_EXISTS:
                email.clear();
                password.clear();
                firstname.clear();
                lastname.clear();
                //Alert user that they already exists
                AlertDialog alert = new AlertDialog(root, "User Already Exists", "The email entered belongs to an already existing user. Please try logging in instead.", "Okay");
                alert.showDialog();

                break;
            case CODES.OK:
                System.out.println("New user successfully created.");
                System.out.println("Please login.");
                //Display alert, success, please log in
                AlertDialog success = new AlertDialog(root, "Account Creation Successful", "Your account has been successfully created. Please login.", "Okay");
                success.actionButton.setOnAction(event1 -> close());
                success.dialog.setOnDialogClosed(event1 -> close());
                success.showDialog();

                break;

            case CODES.INSERTION_ERROR:
                System.out.println("There was an error creating your account. Please try again later.");
                // Display message
                AlertDialog error = new AlertDialog(root, "Server Error", "An unexpected error has occurred. Please contact us at pumpkin@box.com if the issue does not resolve itself on its own.", "Close");
                error.actionButton.setOnAction(event1 -> close());
                error.dialog.setOnDialogClosed(event1 -> close());
                error.showDialog();
                break;

            case CODES.SEND_ERROR:
                // Display message
                AlertDialog send_error = new AlertDialog(root, "Unable to contact server", "An unexpected error has occurred. Please contact us at pumpkin@box.com if issue does not resolve on its own.", "Close");
                send_error.actionButton.setOnAction(event1 -> close());
                send_error.dialog.setOnDialogClosed(event1 -> close());
                send_error.showDialog();
                break;

            default:
                break;
        }
    }


    /**
     * The initialize function of this controller sets up validators, loads icons, makes the stage draggable, and handles events generated by close and minimize icon presses.
     * This function is called automatically, it is part of the Application class.
     * @param location
     * @param resources
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {

        loadIcons();

        setupValidators();

        EffectUtilities.makeDraggable(stage, menuBar);
        EffectUtilities.makeDraggable(stage, draggableRegion);

        closeIcon.setOnMouseClicked((MouseEvent e) ->{
            close();
        });
        minimizeIcon.setOnMouseClicked((MouseEvent e) ->{
            minimize();
        });

        pumpkinbox_logo.setImage(Images.pumpkin);

    }

    /**
     * Function to minimize current stage.
     */
    private void minimize(){
        stage.setIconified(true);
    }



    /**
     * Function to load all icons needed in this view.
     */
    public void loadIcons(){

        //Setting Icons on buttons using **ui.Icons.Icons** class
        icons.setSize("0.4em");

        closeIcon.setGraphic(icons.CLOSE_m);
        minimizeIcon.setGraphic(icons.MINIMIZE_m);

    }

    /**
     * Function to setup text field validators.
     */
    void setupValidators(){
        firstnameValidator = new Validator(firstnameLabel, firstname, "Required");
        firstnameValidator.createNonEmptyValidator();

        lastnameValidator = new Validator(lastnameLabel, lastname, "Required");
        lastnameValidator.createNonEmptyValidator();

        emailValidator = new Validator(emailLabel, email, "Required");
        emailValidator.createEmailValidator();

        passwordValidator = new Validator(passwordLabel, password, "Required");
        passwordValidator.createPasswordValidator();

    }


}
